{"version":3,"sources":["hooks/index.js","components/CreateForm.js","components/Book.js","components/ListEntries.js","App.js","serviceWorker.js","index.js"],"names":["useField","type","useState","value","setValue","onChange","event","target","useResource","url","resources","setResources","create","data","a","axios","post","newResource","updatedResources","concat","getAll","get","response","CreateForm","booksService","kirjoittaja","kirjoittajaReset","otsikko","otsikkoReset","isbn","isbnReset","tagit","tagitReset","related","relatedReset","Form","onSubmit","e","preventDefault","id","Math","floor","random","split","Field","Button","positive","Book","book","Table","definition","Body","Row","Cell","width","map","tagi","key","ListEntries","books","Divider","horizontal","Header","as","App","useEffect","length","Container","size","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.671036a6.chunk.js","sourcesContent":["import axios from 'axios'\nimport { useState } from 'react'\nexport const useField = (type) => {\n    const [value, setValue] = useState('')\n\n    const onChange = (event) => {\n        setValue(event.target.value)\n    }\n\n    const reset = () => {\n        setValue('')\n    }\n\n    return [{\n        type,\n        value,\n        onChange,\n    }, reset]\n}\n\nexport const useResource = url => {\n    const [resources, setResources] = useState([])\n\n    const create = async data => {\n        const newResource = await axios.post(url, data)\n        const updatedResources = resources.concat(newResource.data)\n        setResources(updatedResources)\n    }\n\n    const getAll = async () => {\n        const response = await axios.get(url)\n        setResources(response.data)\n    }\n\n    const service = {\n        create,\n        getAll\n    }\n\n    return [resources, service]\n}","import React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useField } from '../hooks';\n\nexport const CreateForm = ({ booksService }) => {\n    const [kirjoittaja, kirjoittajaReset] = useField('text')\n    const [otsikko, otsikkoReset] = useField('text')\n    const [isbn, isbnReset] = useField('text')\n    const [tagit, tagitReset] = useField('text')\n    const [related, relatedReset] = useField('text')\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        booksService.create({\n            id: Math.floor((Math.random() * 1000) + 1),\n            kirjoittaja: kirjoittaja.value,\n            otsikko: otsikko.value,\n            isbn: isbn.value,\n            tagit: tagit.value.split(','),\n            related: related.value.split(',')\n        })\n\n        kirjoittajaReset();\n        otsikkoReset();\n        isbnReset();\n        tagitReset();\n        relatedReset();\n    }\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label>Kirjoittaja</label>\n                <input {...kirjoittaja} />\n            </Form.Field>\n\n            <Form.Field>\n                <label>Otsikko</label>\n                <input {...otsikko} />\n            </Form.Field>\n\n            <Form.Field>\n                <label>ISBN</label>\n                <input {...isbn} />\n            </Form.Field>\n\n            <Form.Field>\n                <label>Tagit</label>\n                <input {...tagit} />\n            </Form.Field>\n\n            <Form.Field>\n                <label>Vastaavat kurssit</label>\n                <input {...related} />\n            </Form.Field>\n\n            <Button positive type=\"submit\" value=\"Submit\">Lähetä</Button>\n        </Form>\n    )\n\n}","import React from 'react';\nimport { Table } from 'semantic-ui-react';\n\nexport const Book = ({ book }) => {\n    const { kirjoittaja, otsikko, isbn, tagit, related } = book;\n    return (\n        <Table definition>\n            <Table.Body>\n                <Table.Row>\n                    <Table.Cell width={3}>Kirjoittaja</Table.Cell>\n                    <Table.Cell>{kirjoittaja}</Table.Cell>\n                </Table.Row>\n\n                <Table.Row>\n                    <Table.Cell width={3}>Otsikko</Table.Cell>\n                    <Table.Cell>{otsikko}</Table.Cell>\n                </Table.Row>\n\n                <Table.Row>\n                    <Table.Cell width={3}>ISBN</Table.Cell>\n                    <Table.Cell>{isbn}</Table.Cell>\n                </Table.Row>\n\n                <Table.Row>\n                    <Table.Cell width={3}>Tagit</Table.Cell>\n                    <Table.Cell>{tagit.map(tagi => <p key={tagi}>{tagi}</p>)}</Table.Cell>\n                </Table.Row>\n\n                <Table.Row>\n                    <Table.Cell width={3}>Vastaavat kurssit</Table.Cell>\n                    <Table.Cell>{related.map(related => <p key={related}>{related}</p>)}</Table.Cell>\n                </Table.Row>\n            </Table.Body>\n        </Table>\n\n    )\n\n}","import React from 'react';\nimport { Divider, Header } from 'semantic-ui-react';\nimport { Book } from './Book';\n\nexport const ListEntries = ({ books }) => {\n    return (\n        <>\n            <Divider horizontal>\n                <Header as='h2'>\n                    Kirjat\n                </Header>\n            </Divider>\n\n            {books.map(book => <Book key={book.id} book={book} />)}\n        </>\n    )\n}\n\n","import 'fomantic-ui-css/semantic.css';\nimport React, { useEffect } from 'react';\nimport { Container, Header } from 'semantic-ui-react';\nimport { CreateForm } from './components/CreateForm';\nimport { ListEntries } from './components/ListEntries';\nimport { useResource } from './hooks';\n\nfunction App() {\n  const [books, booksService] = useResource('http://localhost:3001/books');\n\n  useEffect(() => {\n    if (books.length === 0) booksService.getAll()\n  }, [books.length, booksService])\n\n  return (\n    <Container>\n      <Header>\n        <Header size='huge'>Lukuvinkkikirjasto</Header>\n        <CreateForm booksService={booksService} />\n        <ListEntries books={books} />\n      </Header>\n    </Container >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}